#! /usr/bin/env python
# -*- coding: utf-8 -*-


class Solution(object):
    def getPermutation(self, n, k):
        """
        :type n: int
        :type k: int
        :rtype: str
        """
        if not n or not k:
            return ""
        nums = [str(i+1) for i in range(n)]
        factorial = [1 for i in range(n+1)]
        for i in range(2, n+1):
            factorial[i] = factorial[i-1] * i

        return self.get_kth(nums, k, factorial)

    # Get the kth str of all the permutation sequence,
    # which is generated by sorted list: nums.
    # factorial[i]: number of i!
    def get_kth(self, nums, k, factorial):
        if k > factorial[-1]:
            return ""

        if k == 1:
            return "".join(nums)
        if k == 0:
            return "".join(nums[-1::-1])

        # Get the unchanged pre str.
        unchanged_end = 0
        for i in range(len(factorial)):
            if factorial[i] >= k:
                unchanged_end = i + 1
                break
        unchanged_str = "".join(nums[:-unchanged_end+1])

        # Get the changed string
        new_nums = nums[-unchanged_end+1:]
        new_start = k / factorial[unchanged_end-2]

        new_k = k % factorial[unchanged_end-2]
        if new_k == 0 and new_start > 0:
            new_start -= 1
        new_nums[0], new_nums[new_start] = new_nums[new_start], new_nums[0]
        unchanged_str += new_nums[0]

        new_nums = new_nums[1:]
        new_nums.sort()
        new_str = self.get_kth(new_nums, new_k, factorial)

        return unchanged_str + new_str

"""
9
23
9
24
9
25
0
1
"""
